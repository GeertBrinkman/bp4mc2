@prefix cnt: <http://www.w3.org/2011/content#>.
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix dct: <http://purl.org/dc/terms/>.
@prefix xhtml: <http://www.w3.org/1999/xhtml/vocab#>.

@prefix page: <http://bp4mc2.org/id/page#>.
@prefix dmap: <http://bp4mc2.org/profiles/dm-ap-sc#>.
@prefix style: <http://bp4mc2.org/id/style#>.

# ========================================
# Main page
# ========================================
page:dm a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Toepassingsprofiel voor informatiemodellen"@nl, "Application profile for data models"@en]
    page:dm-body
    [xhtml:img "dm-ap-sc.png"]
    page:dataModel
    page:shapesGraph
    page:dmUriStrategy
  )
.

page:dm-body a cnt:ContentAsText;
  cnt:chars
'''
Een informatiemodel is een beschrijving van de structuur waarin data over dingen die worden aangeduid met begrippen in het semantische model kunnen worden opgeslagen. Het begrippenkader is bruikbaar om met domeineigenaren en data afnemers te communiceren over de inhoud van een registratie. Het vertalen van een begrippenkader naar een samenhangend datamodel is het werkveld van de data architect.

Een hulpmiddel voor het maken van een informatiemodel is het Nederlandse Metamodel voor Informatie Modellen (MIM), (|zie [https://www.geonovum.nl/geo-standaarden/metamodel-informatiemodellering/nationaal-metamodel-voor-informatiemodellering]). Dit model bevat objectklassen, attribuutsoorten, gegevensgroepen, gegevensgroeptypen, generalisaties, relatiesoorten en relatieklassen. Een op basis van het MIM gemaakt informatiemodel kan worden uitgedrukt in UML of in RDF. Met andere woorden het is ‘vormvrij’. Een MIM-klasse is in de regel een realisatie van een begrip. Zo is het de attribuutsoort ‘hoofdadres’ in de BAG de realisatie van het begrip ‘Hoofdadres’ en de objectklasse ‘AdresseerbaarObject’, waarbij een ‘hoofdadres’ hoort de realisatie van het begrip ‘AdresseerbaarObject’. Het begrip ‘AdresseerbaarObject’ gaat over de (talige, dat wil zeggen in taal) betekenis van een adresseerbaar object. De objectklasse is als het ware een ‘bakje’ waarin de data over een adresseerbaar object kan worden opgeslagen.

Bij het maken van een informatiemodel op basis van een begrippenkader kunnen de volgende good practices worden gehanteerd:
* Voor elk objectiveerbaar begrip ontstaat een klasse. Zo bevat de klasse met de naam ‘OpenbareRuimte’ de data over de objecten die worden aangeduid met het begrip met de naam ‘Openbare ruimte’.
* Begrippen die in een waardelijst worden gepubliceerd worden in een relationeel model en in een linked data model anders behandeld:
** In een relationeel model wordt het bovenliggende begrip (waarvan de begrippen in de waardelijst een specialisatie zijn) vertaald naar een klasse, waarvan de instanties een typering krijgen op basis van een element in de waardelijst. Meestal is dit een eigenschap waarbij ‘soort’, ‘type’ of ‘aard’ in de naam voorkomt.
** In een linked data model worden dergelijke begrippen volledig uitgemodelleerd als subtypen van het bovenliggende begrip.
* Voor elk begrip dat een eigenschap is van een klasse en geen verwijzing is naar een ander begrip, ontstaat een data-eigenschap. Zo representeert de eigenschap met de naam ‘bouwjaar’ het begrip met de naam ‘Bouwjaar’.
* Specialisaties, generalisaties, en partitieve relaties in het begrippenmodel worden vertaald naar specialisaties, generalisaties en partitieve relaties in het informatiemodel.
* Voor iedere semantische relatie in het begrippenmodel wordt in het informatiemodel een relatie gedefinieerd (in linked data een object-eigenschap). Een voorbeeld is ‘ligt in’ als relatie tussen de klassen ‘OpenbareRuimte’ en ‘Woonplaats’ als uitwerking van de semantische relatie tussen de begrippen ‘OpenbareRuimte’ en ‘Woonplaats’.

Een op deze manier uitgewerkt voorbeeld van het model van de BAG is te vinden op [https://bag.basisregistraties.overheid.nl/def]. Via #-uri’s kan worden verwezen naar elementen in dit model, bijvoorbeeld [https://bag.basisregistraties.overheid.nl/def/objectklasse/AdresseerbaarObject#hoofdadres]. Dit voorbeeld is beschikbaar als html webpagina, in turtle en als grafische representatie. Dit voorbeeld laat ook mooi zien hoe de uri-strategie voor het beschrijven van een datamodel werkt. Het intypen van bovenstaande URL zal leiden tot de weergave van de pagina [http://bag.basisregistraties.overheid.nl/def/objectklasse/AdresseerbaarObject] (het deel voor de ‘#’). Met andere woorden: de beschrijving van de entiteit ‘Adresseerbaar object’.
'''@nl,
'''
A data model is a description of the structure in which data about things that are described by concepts in a concept scheme can be stored. The concept scheme can be used to communicate with domain owners and users on the content of a registration. Translating a concept scheme into a coherent data model is the domain of the data architect.

One way for building a data model is to use the Dutch Metamodel for Data models (MIM), (see [https://www.geonovum.nl/geo-standards/metamodel-informatiemodellering/nationaal-metamodel-voor-informatiemodellering]) . This meta model contains object classes, attribute types, data groups, data group types, generalizations, relationship types, and relationship classes. An data model created on base of the MIM can be expressed in UML or in RDF. In other words, it is 'form-free'. A MIM class is usually a realization of a concept. For example, the attribute type 'main address' in the BAG is the realization of the term 'Main address' and the object class 'AddressableObject', where a 'main address' is the realization of the term 'AddressableObject'. The term 'AddressableObject' is about the (linguistic) meaning of an addressable object. The object class is a kind of 'box' in which the data about an addressable object can be stored.

When building an data model based on a concept scheme, the following good practices can be used:
* A class is created for each objectifiable concept. For example, the class with the name 'Public Space' contains the data about the objects that are indicated by the concept 'Public Space'.
* Concepts that are published in a controlled vocabulary are treated differently in a relational model and in a linked data model:
** In a relational model, the parent concept (of which the  concepts in the controlled vocabulary are a specialization) is translated into a class whose instances are typed on base of an element in the controlled vocabulary. Usually this is an attribute with 'type' or ‘kind’ in the name.
** In a linked data model, such concepts are modelled as subtypes of the parent concept.
* For every concept that is a property of a class and is not a reference to another concept, a data property arises. For example, the property with the name 'year of construction' represents the term with the name 'Year of construction'.
* Specializations, generalizations, and partitive relationships in the concept scheme are translated into specializations, generalizations and partitive relationships in the data model.
* For each semantic relation in the conceptual model, a relation is defined in the data model (in linked data an object property). An example is 'lies in' as a relation between the classes 'Public Space' and 'Residence' as an elaboration of the semantic relationship between the terms 'Public Space' and 'Residence'.

An example of the BAG model elaborated in this way can be found at [https://bag.basisregistraties.overheid.nl/def]. #-uri's can be used to reference to elements in this model, for example [https://bag.basisregistraties.overheid.nl/def/objectklasse/ AdresseerbaarObject#hoofdadres]. This example is available as a html web page, in turtle and as a graph. This example also shows how the uri strategy works to describe a data model. Typing in the above URL will lead to the display the part for the '#'of the page [http://bag.basisregistraties.overheid.nl/def/objectklasse/ AdresseerbaarObject]. In other words: the description of the entity 'Addressable object'.
'''@en;
.

# ========================================
# DataModel
# ========================================
page:dataModel a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Informatiemodel"@nl, "Data model"@en]
    [dct:subject dmap:DataModel; xhtml:stylesheet style:nodeshape]
    page:dataModel-properties
    page:dataModel-relations
  )
.

page:dataModel-properties a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Eigenschappen"@nl, "Properties"@en]
    [dct:subject dmap:DataModel; xhtml:stylesheet style:datatype-properties]
  )
.

page:dataModel-relations a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Relaties"@nl, "Relations"@en]
    [dct:subject dmap:DataModel; xhtml:stylesheet style:object-properties]
  )
.


#---------------------
# ShapesGraph
#---------------------
page:shapesGraph a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "model beschrijving"@nl, "shapes graph"@en]
    [dct:subject dmap:ShapesGraph; xhtml:stylesheet style:nodeshape]
  )
.

page:dmUriStrategy a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Uri strategie"@nl, "Uri strategy"@en]
    page:dm-uri-body
  )
.

page:dm-uri-body a cnt:ContentAsText;
  cnt:chars
'''
Een informatiemodel krijgt een uri conform de beschrijvende asset.
'''@nl,
'''
A data model gets a uri from the asset that describes the model.
...'''@en;
.
