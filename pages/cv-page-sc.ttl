@prefix cnt: <http://www.w3.org/2011/content#>.
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix dct: <http://purl.org/dc/terms/>.
@prefix xhtml: <http://www.w3.org/1999/xhtml/vocab#>.

@prefix page: <http://bp4mc2.org/id/page#>.
@prefix cvap: <http://bp4mc2.org/profiles/cv-ap-sc#>.
@prefix style: <http://bp4mc2.org/id/style#>.

# ========================================
# Main page
# ========================================
page:cv a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "CV Toepassingsprofiel voor waardelijsten"@nl, "CV Application profile for controlled vocabularies"@en]
    page:cv-body
    [xhtml:img "cv-ap-sc.png"]
    page:controlledVocabulary
    page:schemeControlledVocabulary
    page:collectionControlledVocabulary
    page:referenceControlledVocabulary
    page:cvUriStrategy
  )
.

page:cv-body a cnt:ContentAsText;
  cnt:chars
'''
Waardelijsten zijn lijstjes met elementen waaraan vanuit verschillende toepassingen, soms zelfs vanuit verschillende organisaties wordt gerefereerd. Soms worden dit ook wel referentiedata genoemd. Waardelijsten kunnen 3 verschillende vormen hebben:
* Waardelijsten met elementen die met een begrip in het begrippenkader (skos:ConceptScheme) worden aangeduid. Een voorbeeld uit de BAG is het ‘gebruiksdoel’ van een ‘Pand’. Dat kan ‘wonen’, ‘winkel’, ‘kantoor’, et cetera zijn. Semantisch betekent dit dat er verschillende soorten panden zijn, namelijk woonhuizen, winkels en kantoren. Om het datamodel overzichtelijk te houden is in de BAG de ontwerpkeuze gemaakt om 1 objecttype te definiëren. Dit heeft als attribuuttype ‘gebruiksdoel’, dat de waarden 'wonen', 'winkel', 'kantoor', et cetera in de waardenlijst kan aannemen. Bijkomend voordeel is dat het datamodel niet hoeft te worden aangepast als er een gebruiksdoel bij komt. Dan hoeft alleen maar een nieuw element aan de waardenlijst te worden toegevoegd. Als het om betekenis gaat zijn 'wonen', 'winkel', 'kantoor', et cetera specialisaties van het begrp 'gebruiksdoel'. Ze vormen een skos:Collections met als skos:Label 'gebruiksdoel' binnen het skos:ConceptScheme 'BAG'.
* Een variant op dit type waardelijst is een lijst met begrippen die als zelfstandig begrippenkader (skos:ConceptScheme) worden gepubliceerd. Dit gebeurt bijvoorbeeld bij de Europese Inspire waardelijsten. De concepten in zo’n schema worden vaak als skos:TopConcept gedefinieerd, opdat ze in lokale waardelijsten, bijvoorbeeld Nederlandse waardelijsten, kunnen worden gedetailleerd.
* Het derde type waardenlijst is een lijst met instanties van een klasse. Een voorbeeld is een lijst van Nederlandse gemeenten of een lijst met bestuurlijke gebieden. Dit zijn geen begrippen (skos:Concept), maar instanties van de klasse ‘Gemeente’ die door het Ministerie van BZK is gedefinieerd.

Voor de basale representatie van de waardenlijst maakt het niet uit of het een lijst in de vorm van een skos:Collection of een skos:ConceptScheme is met instanties van skos concepten of een lijst met mogelijke instanties van een klasse. Beide vormen hebben een basale structuur met soms een code (bijvoorbeeld de CBS-gemeentecode) en altijd een omschrijving (bijvoorbeeld de gemeentenaam).
* Voor de code kan skos:notation worden gebruikt.
* Voor de omschrijving wordt het skos:prefLabel gebruikt.
* Wanneer een waardenlijst als Linked data wordt gepubliceerd krijgt iedere waarde in die lijst bovendien een uri.

De waarden in de waardenlijst kunnen dezelfde metadata meekrijgen als begrippen, namelijk 'has status', 'is generated at time', 'is invalidated at time', 'is valid during', 'is issued', 'is valid at'.

Bij instanties van klassen kunnen alle extra kenmerken van die klasse die nodig zijn voor gebruik buiten het domein waarin de oorspronkelijke klasse is gedefinieerd, worden toegevoegd. In het voorbeeld van de lijst met Nederlandse gemeenten kan dit de geometrie van het bestuurlijk gebied zijn en visualisatiecodes voor afbeelding op een kaart.
'''@nl,
'''
Controlled vocabularies are lists of data elements that are referred to from different applications, sometimes even from different organizations. Sometimes these are also called reference data. Controlled vocabularies can have 3 different representations:
* Controlled vocabularies with elements that are concepts in a concept scheme (skos:ConceptScheme). An example from the Dutch Key Registry for Addresses and Buildings (BAG) is the 'purpose of use' of a 'Building'. That can be 'living', 'shop', 'office', et cetera. Semantically, this means that there are different types of properties, namely residential houses, shops and offices. To keep the data model clear, the design choice is made in the BAG to define 1 object type. This has a property 'purpose of use', that can have the value 'living', 'store', 'office', et cetera. in the controlled vocabulary. An additional advantage is that the data model does not need to be adjusted if a new purpose of use is added. Only a new element needs to be added to the controlled vocabulary. Semantically 'living', 'shop', 'office', et cetera. are specializations of the term 'purpose of use'. They form a skos:Collection with a skos:Label 'purpose for use' in the skos:ConceptScheme 'BAG'.
* A variant of this type controlled vocabularies is a controlled vocabulary that is published as an independent concept scheme (skos:ConceptScheme). This is the way the European Inspire controlled vocabularies are described. The concepts in such a scheme are often defined as skos:TopConcept to enable concepts to be detailed in local controlled vocabularies, for example Dutch controlled vocabularies.
* The third type of controlled vocabulary is a list of instances of a class. An example is a list of Dutch municipalities or a list of administrative areas. These are not concepts (skos:Concept), but instances of the class 'Municipality' defined by the Ministry of Internal Affairs.
For the basic representation of the controlled vocabulary it does not matter if it is a list defined as a skos:Collection or a skos:ConceptScheme with instances of skos concepts or a list of possible instances of a class. Both forms have a basic structure with sometimes a code (for example the CBS municipal code) and always a label (for example the municipality name).
* Skos:notation can be used for the code.
* For the label the skos:prefLabel is used.
* When a value list is published as Linked data, every value in that list is also given a uri.
The elements in controlled vocabulary can have the same metadata as concepts, namely 'has status', 'is generated at time', 'is invalidated at time', 'is valid during', 'is issued', 'is valid at'.
For class instances, any additional attributes of that class required for use outside the domain in which the original class is defined can be added. In the example of the list of Dutch municipalities, this can be the geometry of the administrative area and visualization codes for representation on a map.
'''@en;
.

# ========================================
# ControlledVocabulary
# ========================================
page:controlledVocabulary a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Waardelijst"@nl, "Controlled vocabulary"@en]
    [dct:subject cvap:ControlledVocabulary; xhtml:stylesheet style:nodeshape]
    page:controlledVocabulary-properties
    page:controlledVocabulary-relations
  )
.

page:controlledVocabulary-properties a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Eigenschappen"@nl, "Properties"@en]
    [dct:subject cvap:ControlledVocabulary; xhtml:stylesheet style:datatype-properties]
  )
.

page:controlledVocabulary-relations a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Relaties"@nl, "Relations"@en]
    [dct:subject cvap:ControlledVocabulary; xhtml:stylesheet style:object-properties]
  )
.

# ========================================
# SchemeControlledVocabulary
# ========================================
page:schemeControlledVocabulary a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Waardelijst als begrippenkader"@nl, "Controlled vocabulary as concept scheme"@en]
    [dct:subject cvap:SchemeControlledVocabulary; xhtml:stylesheet style:nodeshape]
    page:schemeControlledVocabulary-properties
    page:schemeControlledVocabulary-relations
  )
.

page:schemeControlledVocabulary-properties a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Eigenschappen"@nl, "Properties"@en]
    [dct:subject cvap:SchemeControlledVocabulary; xhtml:stylesheet style:datatype-properties]
  )
.

page:schemeControlledVocabulary-relations a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Relaties"@nl, "Relations"@en]
    [dct:subject cvap:SchemeControlledVocabulary; xhtml:stylesheet style:object-properties]
  )
.

# ========================================
# CollectionControlledVocabulary
# ========================================
page:CollectionControlledVocabulary a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Waardelijst als collection"@nl, "Controlled vocabulary as collection"@en]
    [dct:subject cvap:collectionControlledVocabulary; xhtml:stylesheet style:nodeshape]
    page:collectionControlledVocabulary-properties
    page:collectionControlledVocabulary-relations
  )
.

page:collectionControlledVocabulary-properties a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Eigenschappen"@nl, "Properties"@en]
    [dct:subject cvap:CollectionControlledVocabulary; xhtml:stylesheet style:datatype-properties]
  )
.

page:collectionControlledVocabulary-relations a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Relaties"@nl, "Relations"@en]
    [dct:subject cvap:CollectionControlledVocabulary; xhtml:stylesheet style:object-properties]
  )
.

# ========================================
# ReferenceControlledVocabulary
# ========================================
page:ReferenceControlledVocabulary a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Waardelijst als referentielijst"@nl, "Controlled vocabulary as reference list"@en]
    [dct:subject cvap:ReferenceControlledVocabulary; xhtml:stylesheet style:nodeshape]
    page:referenceControlledVocabulary-properties
    page:referenceControlledVocabulary-relations
  )
.

page:referenceControlledVocabulary-properties a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Eigenschappen"@nl, "Properties"@en]
    [dct:subject cvap:ReferenceControlledVocabulary; xhtml:stylesheet style:datatype-properties]
  )
.

page:referenceControlledVocabulary-relations a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Relaties"@nl, "Relations"@en]
    [dct:subject cvap:ReferenceControlledVocabulary; xhtml:stylesheet style:object-properties]
  )
.
# ========================================
# Uri strategy
# ========================================

page:cvUriStrategy a cnt:ContentAsText;
  dct:hasPart (
    [xhtml:heading "Uri strategie"@nl, "Uri strategy"@en]
    page:cv-uri-body
  )
.

page:cv-uri-body a cnt:ContentAsText;
  cnt:chars
'''
Een lijst (collectie of schema) van begrippen of een lijst met instanties van een klasse krijgt een uri conform de beschrijvende asset.

Een waarde in een lijst (collectie of schema) van begrippen krijgt een uri volgens het patroon:
* `http://{domain}/id/concept/{rdfs:label}`, waarbij het `{rdfs:label}` het label van de collectie of het schema is.

Een waarde in een lijst met instanties van een klasse krijgt een uri volgens het patroon:
* `http://{domain}/id/{class}/{rdfs:label}`, waarbij het `{rdfs:label}` de naam van de betreffende instantie is.
'''@nl,
'''
A list (collection or scheme) of concepts or a list of instances of a class gets a uri from the asset that describes the list.

A value in a list (collection or schema) of concepts gets a uri according to the pattern:
* `http://{domain}/id/concept/{rdfs:label}`, where the rdfs:label is the label of the collection or schema.

A value in a list of instances of a class is given a uri according to the pattern:
* `http://{domain}/id/{class}/{rdfs:label}`, where the rdfs:label is the label of the relevant instance.
'''@en;
.
