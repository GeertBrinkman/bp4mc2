stage:UploadedVocabularyAppearanceYed a elmo:Representation;
	elmo:url-pattern	"/query/uploaded-vocabulary\\.yed$";
	elmo:layer elmo:TopLayer;
	elmo:fragment [
		elmo:applies-to rdfs:subClassOf;
		rdfs:label "";
		yed:sourceArrow "none";
		yed:targetArrow "white_delta";
	];
	elmo:query '''
		prefix shacl: <http://www.w3.org/ns/shacl#>
		# prefix owl: <http://www.w3.org/2002/07/owl#>
		prefix container: <http://localhost:8080/toepasbareregels/container/>
		
		CONSTRUCT {
			?element rdfs:label ?label.
			?element rdfs:comment ?attribs.
			?element rdfs:subClassOf ?super.
			?element ?pc ?class.
			?element rdf:type owl:Class.
			?pc rdfs:label ?plabel.
		}
		WHERE {
			GRAPH container:dmn {
				?element rdf:type owl:Class.
				?element rdfs:label ?label
				OPTIONAL {?element rdfs:subClassOf ?super}
				OPTIONAL {
					select ?element ?pc ?class (concat(if(bound(?plabel),?plabel,strafter(str(?pred),"#"))," [",if(bound(?minc),?minc,"0"),",",if(bound(?maxc),?maxc,"n"),"]") as ?plabel)
					where {
						?shape shacl:scopeClass ?element.
						?shape shacl:property ?pc.
						?pc shacl:predicate ?pred.
						?pc shacl:class ?class.
						?class rdf:type owl:Class.
						OPTIONAL {?pred rdfs:label ?plabel}
						OPTIONAL {?pc shacl:minCount ?minc}
						OPTIONAL {?pc shacl:maxCount ?maxc}
						FILTER NOT EXISTS {?pc shacl:in ?col}
					}
				}
				OPTIONAL {
					select ?element (group_concat(concat(if(bound(?plabel),?plabel,strafter(str(?pred),"#"))," (",strafter(str(?datatype),"#"),") [",if(bound(?minc),?minc,"0"),",",?maxc,"]");separator="\\n") as ?attribs)
					where {
						?shape shacl:scopeClass ?element.
						?shape shacl:property ?pc.
						?pc shacl:predicate ?pred.
						OPTIONAL {?pred rdfs:label ?plabel}
						OPTIONAL {?pc shacl:datatype ?datatype}
						OPTIONAL {?pc shacl:minCount ?minc}
						OPTIONAL {?pc shacl:maxCount ?maxc}
						FILTER NOT EXISTS {
							?pc shacl:class ?class.
							?class rdf:type owl:Class.
						}
					}
					group by ?element
				}
			}
		}
	''';
.