#
#
#
# BEHEER UMLMODEL
#
#
#

#
# CONTAINERS
#

# Uploadcontainer UML-model XMI
container:umlmodelupload a elmo:Container;
	elmo:representation elmo:UploadRepresentation;
	elmo:contains stage:DSOHeader;
	elmo:contains stage:DSOFooter;
	elmo:contains stage:DSOBeheermenu;
	elmo:translator elmo:XMI21Translator;
	rdfs:label "Upload UML-model via XMI2.1";
	elmo:query stage:DSOUMLInclUploadScene;
	elmo:fragment [
        elmo:applies-to "model";
        rdfs:label "Selecteer model"@nl;
        elmo:constraint elmo:MandatoryConstraint;
        elmo:index "1";
    ];
.

# Uploadcontainer UML-model Turtle
container:ttlmodelupload a elmo:Container;
elmo:representation elmo:UploadRepresentation;
	elmo:contains stage:DSOHeader;
	elmo:contains stage:DSOFooter;
	elmo:contains stage:DSOBeheermenu;
	rdfs:label "Upload UML-model via Turtle";
	elmo:query stage:DSOTTLUploadScene;
	elmo:fragment [
        elmo:applies-to "model";
        rdfs:label "Selecteer model"@nl;
        elmo:constraint elmo:MandatoryConstraint;
        elmo:index "1";
    ];
.

# Uploadcontainer UML-model Turtle
container:xlsmodelupload a elmo:Container;
  elmo:representation elmo:UploadRepresentation;
	elmo:contains stage:DSOHeader;
	elmo:contains stage:DSOFooter;
	elmo:contains stage:DSOBeheermenu;
	rdfs:label "Upload UML-model via Turtle";
  elmo:translator elmo:TableExcelTranslator;
	elmo:query stage:DSOXLSUploadScene;
	elmo:fragment [
    elmo:applies-to "model";
    rdfs:label "Selecteer model"@nl;
    elmo:constraint elmo:MandatoryConstraint;
    elmo:index "1";
  ];
.

#
# SCENES
#

# Uploadquery UML-model inclusief stereotype
stage:DSOUMLInclUploadScene a elmo:Scene;
	rdfs:label "Postquery UML-upload";
	elmo:index "1";
	elmo:query '''
		prefix container: <http://localhost:8080/catalogus/dso/container/>
		prefix uml: <http://schema.omg.org/spec/UML/2.1.1#>
		prefix sh: <http://www.w3.org/ns/shacl#>
		prefix ea: <http://www.sparxsystems.com/extender/EA6.5#>
		
		CLEAR GRAPH <http://localhost:8080/catalogus/dso/def/@MODEL@>
		
		INSERT {
			GRAPH <http://localhost:8080/catalogus/dso/def/@MODEL@> {
				<http://localhost:8080/catalogus/dso/def/@MODEL@> rdf:type owl:Ontology.
				<http://localhost:8080/catalogus/dso/def/@MODEL@> rdfs:label "@MODEL@".
			}
		}
		
		INSERT {
			GRAPH <http://localhost:8080/catalogus/dso/def/@MODEL@> {
				?class rdf:type owl:Class.
				?class rdfs:label ?label.
				?shape rdf:type sh:NodeShape.
				?shape rdfs:label ?label.
				?shape sh:targetClass ?class.
			}
		}
		WHERE {
			SELECT
				(iri(concat('http://localhost:8080/catalogus/dso/def/@MODEL@#',sql:UCamelCase(?label))) AS ?class)
				(iri(concat('http://localhost:8080/catalogus/dso/def/@MODEL@/',sql:UCamelCase(?label))) AS ?shape)
				?label
			WHERE {
				GRAPH container:umlmodelupload {
					?c rdf:type uml:Class.
					?c rdfs:label ?label.
					?c ea:stereotype ?stereotype.
					FILTER NOT EXISTS {
						?c ea:stereotype 'CodeList'.
					}
				}
			}
		}
		
		INSERT {
			GRAPH <http://localhost:8080/catalogus/dso/def/@MODEL@> {
				?property rdf:type owl:DatatypeProperty.
				?property rdfs:label ?alabel.
				?pc rdf:type sh:PropertyShape.
				?shape sh:property ?pc.
				?pc sh:path ?property.
				?pc rdfs:label ?plabel.
			}
		}
		WHERE {
			SELECT
				(iri(concat('http://localhost:8080/catalogus/dso/def/@MODEL@#',sql:UCamelCase(?clabel))) AS ?class)
				(iri(concat('http://localhost:8080/catalogus/dso/def/@MODEL@#',sql:LCamelCase(?alabel))) AS ?property)
				(iri(concat('http://localhost:8080/catalogus/dso/def/@MODEL@/',sql:UCamelCase(?clabel))) AS ?shape)
				(iri(concat('http://localhost:8080/catalogus/dso/def/@MODEL@/',sql:UCamelCase(?clabel),'/',sql:LCamelCase(?alabel))) AS ?pc)
				(concat(?clabel,'.',?alabel) AS ?plabel)
				?clabel ?alabel
			WHERE {
				GRAPH container:umlmodelupload {
					?c rdf:type uml:Class.
					?c uml:ownedAttribute ?a.
					?c ea:stereotype ?stereotype.
					FILTER NOT EXISTS {
						?c ea:stereotype 'CodeList'.
					}
					FILTER NOT EXISTS {
						?a uml:association ?assoc
					}
					?c rdfs:label ?clabel.
					?a rdfs:label ?alabel.
				}
			}
		}
		
		INSERT {
			GRAPH <http://localhost:8080/catalogus/dso/def/@MODEL@> {
				?property rdf:type owl:ObjectProperty.
				?property rdfs:label ?alabel.
				?pc rdf:type sh:PropertyShape.
				?shape sh:property ?pc.
				?pc sh:path ?property.
				?pc rdfs:label ?plabel.
				?pc sh:valueClass ?refclass.
			}
		}
		WHERE {
			SELECT
				(iri(concat('http://localhost:8080/catalogus/dso/def/@MODEL@#',sql:UCamelCase(?clabel))) as ?class)
				(iri(concat('http://localhost:8080/catalogus/dso/def/@MODEL@#',sql:UCamelCase(?rclabel))) as ?refclass)
				(iri(concat('http://localhost:8080/catalogus/dso/def/@MODEL@#',sql:LCamelCase(?alabel))) as ?property)
				(iri(concat('http://localhost:8080/catalogus/dso/def/@MODEL@/',sql:UCamelCase(?clabel))) as ?shape)
				(iri(concat('http://localhost:8080/catalogus/dso/def/@MODEL@/',sql:UCamelCase(?clabel),'/',sql:LCamelCase(?alabel))) as ?pc)
				(concat(?clabel,'.',?alabel) as ?plabel)
				?clabel ?alabel
			WHERE {
				GRAPH container:umlmodelupload {
					?c rdf:type uml:Class.
					?c uml:ownedAttribute ?a.
					?c ea:stereotype ?stereotype.
					FILTER NOT EXISTS {
						?c ea:stereotype 'CodeList'.
					}
					?a uml:association ?assoc.
					?assoc uml:memberEnd ?a.
					?a uml:type ?rc.
					?rc rdfs:label ?rclabel.
					?c rdfs:label ?clabel.
					?a rdfs:label ?alabel.
				}
			}
		}
		INSERT {
			GRAPH <http://localhost:8080/catalogus/dso/def/@MODEL@> {
				?class rdfs:comment ?comment
			}
		}
		WHERE {
			{SELECT
				(iri(concat('http://localhost:8080/catalogus/dso/def/@MODEL@#',sql:UCamelCase(?clabel))) as ?class)
				(replace(?def,'-- .* --','') as ?comment)
			WHERE {
				GRAPH container:umlmodelupload {
					?c rdf:type uml:Class.
					?c rdfs:label ?clabel.
					?c ea:stereotype ?stereotype.
					FILTER NOT EXISTS {
						?c ea:stereotype 'CodeList'.
					}
					?c ea:documentation ?def.
					
				}
			}}
			FILTER (?comment!='')
		}
		
		INSERT {
			GRAPH <http://localhost:8080/catalogus/dso/def/@MODEL@> {
				?property rdfs:comment ?comment
			}
		}
		WHERE {
			{SELECT
				(iri(concat('http://localhost:8080/catalogus/dso/def/@MODEL@#',sql:LCamelCase(?alabel))) as ?property)
				(replace(?def,'-- .* --','') as ?comment)
			WHERE {
				GRAPH container:umlmodelupload {
					?c rdf:type uml:Class.
					?c ea:stereotype ?stereotype.
					FILTER NOT EXISTS {
						?c ea:stereotype 'CodeList'.
					}
					?c uml:ownedAttribute ?a.
					?c rdfs:label ?alabel.
					?a ea:documentation ?def.
					
				}
			}}
			FILTER (?comment!='')
		}
		
		INSERT {
			GRAPH <http://localhost:8080/catalogus/dso/def/@MODEL@> {
				?subclass rdfs:subClassOf ?class
			}
		}
		WHERE {
			SELECT
				(iri(concat('http://localhost:8080/catalogus/dso/def/@MODEL@#',sql:UCamelCase(?clabel))) as ?class)
				(iri(concat('http://localhost:8080/catalogus/dso/def/@MODEL@#',sql:UCamelCase(?sublabel))) as ?subclass)
			WHERE {
				GRAPH container:umlmodelupload {
					?sub uml:generalization ?gen.
					?gen rdf:type uml:Generalization.
					?gen uml:general ?c.
					?sub rdfs:label ?sublabel.
					?c rdfs:label ?clabel.
				}
			}
		}
		
		CLEAR GRAPH container:umlmodelupload	
	''';
.

# Uploadquery TTL-model
stage:DSOTTLUploadScene a elmo:Scene;
	rdfs:label "Postquery TTL-upload";
	elmo:index "1";
	elmo:query '''
		prefix container: <http://localhost:8080/catalogus/dso/container/>
		prefix owl: <http://www.w3.org/2002/07/owl#>

		INSERT {
			GRAPH <http://localhost:8080/catalogus/dso/def/@MODEL@> {
				?s ?p ?o.
			}
		}
		WHERE {
			GRAPH container:ttlmodelupload {
				?s ?p ?o.
			}
		}

		CLEAR GRAPH container:ttlmodelupload
	''';
.

# Uploadquery Excel-model
stage:DSOXLSUploadScene a elmo:Scene;
	rdfs:label "Postquery XSL-upload";
	elmo:index "1";
	elmo:query '''
		prefix container: <http://localhost:8080/catalogus/dso/container/>
		prefix owl: <http://www.w3.org/2002/07/owl#>

		INSERT {
			GRAPH <http://localhost:8080/catalogus/dso/def/@MODEL@> {
				?s ?p ?o.
			}
		}
		WHERE {
			GRAPH container:xlsmodelupload {
				?s ?p ?o.
			}
		}

		CLEAR GRAPH container:xlsmodelupload
	''';
.