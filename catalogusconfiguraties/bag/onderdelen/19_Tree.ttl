#
#
#
# BOOMWEERGAVE
#
#
#

#
# HERBRUIKBARE PAGINA-ONDERDELEN (PARTS)
#

# Boomweergave domeinen, collecties en concepten
stage:BAGTree a elmo:Part;
	elmo:appearance elmo:TreeAppearance;
    elmo:index "99";
	elmo:query stage:BAGTreeQuery;
.

# Query voor de boomweergave
#
#	In de basis bestaat de query uit twee delen:
#		1) Ophalen van alle subjects en objects die in de boom moeten komen
#		2) Koppelen van de collecties aan die subjects en objects
#
#	Het daadwerkelijk ophalen van de subjects en objects bestaat uit drie delen:
#		a) Het ophalen van de triples met als predicates thes:broaderGeneric en thes:broaderPartitive
#		b) Het ophalen van de triples met als predicates thes:narrowerGeneric en thes:narrowerPartitive
#			N.B. deze laatste triples worden 'omgedraaid' in de weergave, omdat thes:narrowerGeneric de inverse is van thes:broaderGeneric
#
#	Het tweede deel (koppelen van de collecties) staat binnen een OPTIONAL. Dit is vanwege de werking van de TreeAppearance:
#	we willen alleen dat de collectie van de toplevel concepten opgehaald worden, omdat anders de niet-toplevel-elementen zowel op hun
#	'reguliere' plek in de boom worden geplaatst, als rechtstreeks onder de collectie. Wij willen bijvoorbeeld dit zien:
#
#	+ Collectie
#		+ Toplevel_concept
#			+ Niet_toplevel_concept
#
#	En dus niet dit:
#	
#	+ Collectie
#		+ Toplevel_concept
#			+ Niet_toplevel_concept
#		+ Niet_toplevel_concept
#
#	De OPTIONAL hebben we nodig omdat we dus niet van alle concepten de collectie ophalen; zonder de OPTIONAL zouden die elementen zelf ook niet in de boom verschijnen.
# 	Het daadwerkelijk koppelen is vrij eenvoudig en gaat via het skos:member predicate.
#	Hieraan vast zit een FILTER NOT EXISTS die alle subjects die geen toplevel element zijn eruit filtert.

stage:BAGTreeQuery a elmo:Query;
	elmo:query '''
		prefix thes: <http://purl.org/iso25964/skos-thes#>
		prefix prov: <http://www.w3.org/ns/prov#>
		prefix skos: <http://www.w3.org/2004/02/skos/core#>
		prefix skoslex: <http://bp4mc2.org/def/skos-lex/>
		prefix container: <http://localhost:8080/catalogus/bag/container/>
		prefix doc: <http://localhost:8080/catalogus/bag/concepten/doc/>
		prefix collection: <http://localhost:8080/catalogus/bag/id/collection/>
		prefix concept: <http://localhost:8080/catalogus/bag/id/concept/>
		prefix dmn: <http://www.omg.org/spec/DMN/20151101/dmn#>
		
		CONSTRUCT {
			?s rdfs:label ?sLabel.
			?o rdfs:label ?oLabel.
			?o dmn:informationRequirement ?s.
		}
		WHERE {
			{
				SELECT ?s, ?sLabel, ?o, ?oLabel
				WHERE {
					{
						SELECT DISTINCT ?broaderSubject AS ?s, ?broaderSubjectLabel AS ?sLabel, ?broaderObject AS ?o, ?broaderObjectLabel AS ?oLabel
						WHERE {
							GRAPH ?broaderSubjectGraph {
								{
									?broaderSubject rdf:type dmn:Decision.
									?broaderSubject rdfs:label ?broaderSubjectLabel.
									?broaderSubject dmn:informationRequirement/dmn:requiredDecision ?broaderObject.
								}
								FILTER NOT EXISTS {
									?broaderSubject prov:invalidatedAtTime ?broaderSubjectTime.
								}
							}
							GRAPH ?broaderObjectGraph {
								?broaderObject rdf:type dmn:Decision.
								?broaderObject dmn:question ?broaderObjectLabel.
								FILTER NOT EXISTS {
									?broaderObject prov:invalidatedAtTime ?broaderObjectTime.
								}
							}
							GRAPH doc:mastergraph {
								?broaderSubject rdfs:isDefinedBy ?broaderSubjectGraph.
								?broaderObject rdfs:isDefinedBy ?broaderObjectGraph.
							}
					}
					
				}
			}
		}
		}
		ORDER BY lcase(?sLabel), lcase(?oLabel)
		
	'''
.
