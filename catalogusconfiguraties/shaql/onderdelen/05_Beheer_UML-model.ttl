#
#
#
# BEHEER UMLMODEL
#
#
#

@prefix stage: <http://localhost:8080/catalogus/shaql/stage#>.
@prefix updatestage: <http://localhost:8080/catalogus/shaql/update/>.
@prefix elmo: <http://bp4mc2.org/elmo/def#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix xhtml: <http://www.w3.org/1999/xhtml/vocab#>.
@prefix container: <http://localhost:8080/catalogus/shaql/container/>.
@prefix skos: <http://www.w3.org/2004/02/skos/core#>.
@prefix skosax: <http://bp4mc2.org/skosax#>.
@prefix skoslex: <http://bp4mc2.org/def/skos-lex#>.
@prefix thes: <http://purl.org/iso25964/skos-thes#>.
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix dct: <http://purl.org/dc/terms/>.
@prefix dctype: <http://purl.org/dc/dcmitype/>.
@prefix geosparql: <http://www.opengis.net/ont/geosparql#>.
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix prov: <http://www.w3.org/ns/prov#>.
@prefix brt: <http://brt.basisregistraties.overheid.nl/id/dataset/>.
@prefix vcard: <http://www.w3.org/2006/vcard/ns#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix iso: <http://id.loc.gov/vocabulary/iso639-1/>.
@prefix dcat: <http://www.w3.org/ns/dcat#>.

#
# CONTAINERS
#

# Uploadcontainer UML-model
container:umlmodelupload a elmo:Container;
	elmo:representation elmo:UploadRepresentation;
	elmo:contains stage:ShaqlHeader;
	elmo:contains stage:ShaqlFooter;
	elmo:contains stage:ShaqlBeheermenu;
	elmo:translator elmo:XMI21Translator;
	rdfs:label "Upload UML-model via XMI2.1";
.

#
# PRODUCTIONS
#

updatestage:syncumlupload a elmo:Production;
	elmo:contains stage:ShaqlHeader;
	elmo:contains stage:ShaqlFooter;
	elmo:contains stage:ShaqlBeheermenu;
	elmo:queryForm stage:ShaqlSelectModel;
	elmo:contains stage:ShaqlUMLUploadScene;
.

updatestage:syncumlinclupload a elmo:Production;
	elmo:contains stage:ShaqlHeader;
	elmo:contains stage:ShaqlFooter;
	elmo:contains stage:ShaqlBeheermenu;
	elmo:queryForm stage:ShaqlSelectModel;
	elmo:contains stage:ShaqlUMLInclUploadScene;
.

#
# SCENES
#

# Uploadquery UML-model exclusief stereotype
stage:ShaqlUMLUploadScene a elmo:Scene;
	rdfs:label "Postquery UML-upload";
	elmo:index "1";
	elmo:query '''
		prefix container: <http://localhost:8080/catalogus/shaql/container/>
		prefix uml: <http://schema.omg.org/spec/UML/2.1.1#>
		prefix sh: <http://www.w3.org/ns/shacl#>
		prefix ea: <http://www.sparxsystems.com/extender/EA6.5#>
		
		INSERT INTO <temp> {
			?model rdf:type owl:Ontology.
			?model rdfs:label ?label.
		} WHERE {
			GRAPH <@MODEL@> {
				?model rdf:type owl:Ontology.
				?model rdfs:label ?label.
			}
		}
		
		CLEAR GRAPH <@MODEL@>
		
		INSERT INTO <@MODEL@> {
			?s ?p ?o
		} WHERE {
			GRAPH <temp> {
				?s ?p ?o
			}
		}
		
		CLEAR GRAPH <temp>
		
		INSERT INTO <@MODEL@> {
			?class rdf:type owl:Class.
			?class rdfs:label ?label.
			?shape rdf:type sh:Shape.
			?shape rdfs:label ?label.
			?shape sh:scopeClass ?class.
		}
		WHERE {
			SELECT
				(iri(concat('@MODEL@#',sql:UCamelCase(?label))) AS ?class)
				(iri(concat('@MODEL@/',sql:UCamelCase(?label))) AS ?shape)
				?label
			WHERE {
				GRAPH container:umlmodelupload {
					?c rdf:type uml:Class.
					?c rdfs:label ?label.
					# ?c ea:stereotype ?stereotype.
					FILTER NOT EXISTS {
						?c ea:stereotype 'CodeList'.
					}
				}
			}
		}
		
		INSERT INTO <@MODEL@> {
			?property rdf:type owl:DatatypeProperty.
			?property rdfs:label ?alabel.
			?pc rdf:type sh:PropertyConstraint.
			?shape sh:property ?pc.
			?pc sh:predicate ?property.
			?pc rdfs:label ?plabel.
		}
		WHERE {
			SELECT
				(iri(concat('@MODEL@#',sql:UCamelCase(?clabel))) AS ?class)
				(iri(concat('@MODEL@#',sql:LCamelCase(?alabel))) AS ?property)
				(iri(concat('@MODEL@/',sql:UCamelCase(?clabel))) AS ?shape)
				(iri(concat('@MODEL@/',sql:UCamelCase(?clabel),'/',sql:LCamelCase(?alabel))) AS ?pc)
				(concat(?clabel,'.',?alabel) AS ?plabel)
				?clabel ?alabel
			WHERE {
				GRAPH container:umlmodelupload {
					?c rdf:type uml:Class.
					?c uml:ownedAttribute ?a.
					# ?c ea:stereotype ?stereotype.
					FILTER NOT EXISTS {
						?c ea:stereotype 'CodeList'.
					}
					FILTER NOT EXISTS {
						?a uml:association ?assoc
					}
					?c rdfs:label ?clabel.
					?a rdfs:label ?alabel.
				}
			}
		}
		
		INSERT INTO <@MODEL@> {
			?property rdf:type owl:ObjectProperty.
			?property rdfs:label ?alabel.
			?pc rdf:type sh:PropertyConstraint.
			?shape sh:property ?pc.
			?pc sh:predicate ?property.
			?pc rdfs:label ?plabel.
			?pc sh:class ?refclass.
		}
		WHERE {
			SELECT
				(iri(concat('@MODEL@#',sql:UCamelCase(?clabel))) as ?class)
				(iri(concat('@MODEL@#',sql:UCamelCase(?rclabel))) as ?refclass)
				(iri(concat('@MODEL@#',sql:LCamelCase(?alabel))) as ?property)
				(iri(concat('@MODEL@/',sql:UCamelCase(?clabel))) as ?shape)
				(iri(concat('@MODEL@/',sql:UCamelCase(?clabel),'/',sql:LCamelCase(?alabel))) as ?pc)
				(concat(?clabel,'.',?alabel) as ?plabel)
				?clabel ?alabel
			WHERE {
				GRAPH container:umlmodelupload {
					?c rdf:type uml:Class.
					?c uml:ownedAttribute ?a.
					# ?c ea:stereotype ?stereotype.
					FILTER NOT EXISTS {
						?c ea:stereotype 'CodeList'.
					}
					?a uml:association ?assoc.
					?assoc uml:memberEnd ?a.
					?a uml:type ?rc.
					?rc rdfs:label ?rclabel.
					?c rdfs:label ?clabel.
					?a rdfs:label ?alabel.
				}
			}
		}
		INSERT INTO <@MODEL@> {
			?class rdfs:comment ?comment
		}
		WHERE {
			{SELECT
				(iri(concat('@MODEL@#',sql:UCamelCase(?clabel))) as ?class)
				(replace(?def,'-- .* --','') as ?comment)
			WHERE {
				GRAPH container:umlmodelupload {
					?c rdf:type uml:Class.
					?c rdfs:label ?clabel.
					# ?c ea:stereotype ?stereotype.
					FILTER NOT EXISTS {
						?c ea:stereotype 'CodeList'.
					}
					?c ea:documentation ?def.
					
				}
			}}
			FILTER (?comment!='')
		}
		INSERT INTO <@MODEL@> {
			?property rdfs:comment ?comment
		}
		WHERE {
			{SELECT
				(iri(concat('@MODEL@#',sql:LCamelCase(?alabel))) as ?property)
				(replace(?def,'-- .* --','') as ?comment)
			WHERE {
				GRAPH container:umlmodelupload {
					?c rdf:type uml:Class.
					# ?c ea:stereotype ?stereotype.
					FILTER NOT EXISTS {
						?c ea:stereotype 'CodeList'.
					}
					?c uml:ownedAttribute ?a.
					?c rdfs:label ?alabel.
					?a ea:documentation ?def.
					
				}
			}}
			FILTER (?comment!='')
		}
		
		INSERT INTO <@MODEL@> {
			?subclass rdfs:subClassOf ?class
		}
		WHERE {
			SELECT
				(iri(concat('@MODEL@#',sql:UCamelCase(?clabel))) as ?class)
				(iri(concat('@MODEL@#',sql:UCamelCase(?sublabel))) as ?subclass)
			WHERE {
				GRAPH container:umlmodelupload {
					?sub uml:generalization ?gen.
					?gen rdf:type uml:Generalization.
					?gen uml:general ?c.
					?sub rdfs:label ?sublabel.
					?c rdfs:label ?clabel.
				}
			}
		}
		
		CLEAR GRAPH container:umlmodelupload	
	''';
.

# Uploadquery UML-model inclusief stereotype
stage:ShaqlUMLInclUploadScene a elmo:Scene;
	rdfs:label "Postquery UML-upload";
	elmo:index "1";
	elmo:query '''
		prefix container: <http://localhost:8080/catalogus/shaql/container/>
		prefix uml: <http://schema.omg.org/spec/UML/2.1.1#>
		prefix sh: <http://www.w3.org/ns/shacl#>
		prefix ea: <http://www.sparxsystems.com/extender/EA6.5#>
		
		INSERT INTO <temp> {
			?model rdf:type owl:Ontology.
			?model rdfs:label ?label.
		} WHERE {
			GRAPH <@MODEL@> {
				?model rdf:type owl:Ontology.
				?model rdfs:label ?label.
			}
		}
		
		CLEAR GRAPH <@MODEL@>
		
		INSERT INTO <@MODEL@> {
			?s ?p ?o
		} WHERE {
			GRAPH <temp> {
				?s ?p ?o
			}
		}
		
		CLEAR GRAPH <temp>
		
		INSERT INTO <@MODEL@> {
			?class rdf:type owl:Class.
			?class rdfs:label ?label.
			?shape rdf:type sh:Shape.
			?shape rdfs:label ?label.
			?shape sh:scopeClass ?class.
		}
		WHERE {
			SELECT
				(iri(concat('@MODEL@#',sql:UCamelCase(?label))) AS ?class)
				(iri(concat('@MODEL@/',sql:UCamelCase(?label))) AS ?shape)
				?label
			WHERE {
				GRAPH container:umlmodelupload {
					?c rdf:type uml:Class.
					?c rdfs:label ?label.
					?c ea:stereotype ?stereotype.
					FILTER NOT EXISTS {
						?c ea:stereotype 'CodeList'.
					}
				}
			}
		}
		
		INSERT INTO <@MODEL@> {
			?property rdf:type owl:DatatypeProperty.
			?property rdfs:label ?alabel.
			?pc rdf:type sh:PropertyConstraint.
			?shape sh:property ?pc.
			?pc sh:predicate ?property.
			?pc rdfs:label ?plabel.
		}
		WHERE {
			SELECT
				(iri(concat('@MODEL@#',sql:UCamelCase(?clabel))) AS ?class)
				(iri(concat('@MODEL@#',sql:LCamelCase(?alabel))) AS ?property)
				(iri(concat('@MODEL@/',sql:UCamelCase(?clabel))) AS ?shape)
				(iri(concat('@MODEL@/',sql:UCamelCase(?clabel),'/',sql:LCamelCase(?alabel))) AS ?pc)
				(concat(?clabel,'.',?alabel) AS ?plabel)
				?clabel ?alabel
			WHERE {
				GRAPH container:umlmodelupload {
					?c rdf:type uml:Class.
					?c uml:ownedAttribute ?a.
					?c ea:stereotype ?stereotype.
					FILTER NOT EXISTS {
						?c ea:stereotype 'CodeList'.
					}
					FILTER NOT EXISTS {
						?a uml:association ?assoc
					}
					?c rdfs:label ?clabel.
					?a rdfs:label ?alabel.
				}
			}
		}
		
		INSERT INTO <@MODEL@> {
			?property rdf:type owl:ObjectProperty.
			?property rdfs:label ?alabel.
			?pc rdf:type sh:PropertyConstraint.
			?shape sh:property ?pc.
			?pc sh:predicate ?property.
			?pc rdfs:label ?plabel.
			?pc sh:class ?refclass.
		}
		WHERE {
			SELECT
				(iri(concat('@MODEL@#',sql:UCamelCase(?clabel))) as ?class)
				(iri(concat('@MODEL@#',sql:UCamelCase(?rclabel))) as ?refclass)
				(iri(concat('@MODEL@#',sql:LCamelCase(?alabel))) as ?property)
				(iri(concat('@MODEL@/',sql:UCamelCase(?clabel))) as ?shape)
				(iri(concat('@MODEL@/',sql:UCamelCase(?clabel),'/',sql:LCamelCase(?alabel))) as ?pc)
				(concat(?clabel,'.',?alabel) as ?plabel)
				?clabel ?alabel
			WHERE {
				GRAPH container:umlmodelupload {
					?c rdf:type uml:Class.
					?c uml:ownedAttribute ?a.
					?c ea:stereotype ?stereotype.
					FILTER NOT EXISTS {
						?c ea:stereotype 'CodeList'.
					}
					?a uml:association ?assoc.
					?assoc uml:memberEnd ?a.
					?a uml:type ?rc.
					?rc rdfs:label ?rclabel.
					?c rdfs:label ?clabel.
					?a rdfs:label ?alabel.
				}
			}
		}
		INSERT INTO <@MODEL@> {
			?class rdfs:comment ?comment
		}
		WHERE {
			{SELECT
				(iri(concat('@MODEL@#',sql:UCamelCase(?clabel))) as ?class)
				(replace(?def,'-- .* --','') as ?comment)
			WHERE {
				GRAPH container:umlmodelupload {
					?c rdf:type uml:Class.
					?c rdfs:label ?clabel.
					?c ea:stereotype ?stereotype.
					FILTER NOT EXISTS {
						?c ea:stereotype 'CodeList'.
					}
					?c ea:documentation ?def.
					
				}
			}}
			FILTER (?comment!='')
		}
		INSERT INTO <@MODEL@> {
			?property rdfs:comment ?comment
		}
		WHERE {
			{SELECT
				(iri(concat('@MODEL@#',sql:LCamelCase(?alabel))) as ?property)
				(replace(?def,'-- .* --','') as ?comment)
			WHERE {
				GRAPH container:umlmodelupload {
					?c rdf:type uml:Class.
					?c ea:stereotype ?stereotype.
					FILTER NOT EXISTS {
						?c ea:stereotype 'CodeList'.
					}
					?c uml:ownedAttribute ?a.
					?c rdfs:label ?alabel.
					?a ea:documentation ?def.
					
				}
			}}
			FILTER (?comment!='')
		}
		
		INSERT INTO <@MODEL@> {
			?subclass rdfs:subClassOf ?class
		}
		WHERE {
			SELECT
				(iri(concat('@MODEL@#',sql:UCamelCase(?clabel))) as ?class)
				(iri(concat('@MODEL@#',sql:UCamelCase(?sublabel))) as ?subclass)
			WHERE {
				GRAPH container:umlmodelupload {
					?sub uml:generalization ?gen.
					?gen rdf:type uml:Generalization.
					?gen uml:general ?c.
					?sub rdfs:label ?sublabel.
					?c rdfs:label ?clabel.
				}
			}
		}
		
		CLEAR GRAPH container:umlmodelupload	
	''';
.